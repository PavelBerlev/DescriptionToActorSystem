//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//azazi//Desktop//GameInitialization//Game//src//ActorGrammar ANTLR//ActorsGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ActorsGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER=1, DBWRITER=2, TASKNOTION=3, NAME=4, NEXT=5, KEYS=6, KEY=7, NOTIONTO=8, 
		COLLECTION=9, WORD=10, WHITESPACE=11, NEWLINE=12;
	public const int
		RULE_actorSystem = 0, RULE_actor = 1, RULE_dbwriter = 2, RULE_tasknotion = 3, 
		RULE_keyValue = 4;
	public static readonly string[] ruleNames = {
		"actorSystem", "actor", "dbwriter", "tasknotion", "keyValue"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'DBWriter'", "'TaskNotion'", "'Name'", "'Next'", "'Keys'", 
		"'Key'", "'NotionTo'", "'Collection'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "DBWRITER", "TASKNOTION", "NAME", "NEXT", "KEYS", "KEY", 
		"NOTIONTO", "COLLECTION", "WORD", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ActorsGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ActorsGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ActorsGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ActorsGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ActorSystemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActorContext[] actor() {
			return GetRuleContexts<ActorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActorContext actor(int i) {
			return GetRuleContext<ActorContext>(i);
		}
		public ActorSystemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actorSystem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActorsGrammarVisitor<TResult> typedVisitor = visitor as IActorsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActorSystem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActorSystemContext actorSystem() {
		ActorSystemContext _localctx = new ActorSystemContext(Context, State);
		EnterRule(_localctx, 0, RULE_actorSystem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10;
				actor();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DBWRITER || _la==TASKNOTION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DbwriterContext dbwriter() {
			return GetRuleContext<DbwriterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TasknotionContext tasknotion() {
			return GetRuleContext<TasknotionContext>(0);
		}
		public ActorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActorsGrammarVisitor<TResult> typedVisitor = visitor as IActorsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActorContext actor() {
		ActorContext _localctx = new ActorContext(Context, State);
		EnterRule(_localctx, 2, RULE_actor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DBWRITER:
				{
				State = 15;
				dbwriter();
				}
				break;
			case TASKNOTION:
				{
				State = 16;
				tasknotion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbwriterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBWRITER() { return GetToken(ActorsGrammarParser.DBWRITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ActorsGrammarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(ActorsGrammarParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(ActorsGrammarParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(ActorsGrammarParser.COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(ActorsGrammarParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(ActorsGrammarParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueContext[] keyValue() {
			return GetRuleContexts<KeyValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueContext keyValue(int i) {
			return GetRuleContext<KeyValueContext>(i);
		}
		public DbwriterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbwriter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActorsGrammarVisitor<TResult> typedVisitor = visitor as IActorsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbwriter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbwriterContext dbwriter() {
		DbwriterContext _localctx = new DbwriterContext(Context, State);
		EnterRule(_localctx, 4, RULE_dbwriter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			Match(DBWRITER);
			State = 20;
			Match(NAME);
			State = 21;
			Match(WORD);
			State = 22;
			Match(COLLECTION);
			State = 23;
			Match(WORD);
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEXT) {
				{
				State = 24;
				Match(NEXT);
				State = 25;
				Match(WORD);
				}
			}

			State = 28;
			Match(KEYS);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 29;
				keyValue();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TasknotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TASKNOTION() { return GetToken(ActorsGrammarParser.TASKNOTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ActorsGrammarParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(ActorsGrammarParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(ActorsGrammarParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLECTION() { return GetToken(ActorsGrammarParser.COLLECTION, 0); }
		public TasknotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tasknotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActorsGrammarVisitor<TResult> typedVisitor = visitor as IActorsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTasknotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TasknotionContext tasknotion() {
		TasknotionContext _localctx = new TasknotionContext(Context, State);
		EnterRule(_localctx, 6, RULE_tasknotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(TASKNOTION);
			State = 35;
			Match(NAME);
			State = 36;
			Match(WORD);
			State = 37;
			Match(COLLECTION);
			State = 38;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(ActorsGrammarParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(ActorsGrammarParser.WORD, 0); }
		public KeyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IActorsGrammarVisitor<TResult> typedVisitor = visitor as IActorsGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueContext keyValue() {
		KeyValueContext _localctx = new KeyValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_keyValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(KEY);
			State = 41;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,44,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,4,0,12,8,0,11,0,
		12,0,13,1,1,1,1,3,1,18,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,27,8,2,1,2,
		1,2,4,2,31,8,2,11,2,12,2,32,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,0,
		0,5,0,2,4,6,8,0,0,42,0,11,1,0,0,0,2,17,1,0,0,0,4,19,1,0,0,0,6,34,1,0,0,
		0,8,40,1,0,0,0,10,12,3,2,1,0,11,10,1,0,0,0,12,13,1,0,0,0,13,11,1,0,0,0,
		13,14,1,0,0,0,14,1,1,0,0,0,15,18,3,4,2,0,16,18,3,6,3,0,17,15,1,0,0,0,17,
		16,1,0,0,0,18,3,1,0,0,0,19,20,5,2,0,0,20,21,5,4,0,0,21,22,5,10,0,0,22,
		23,5,9,0,0,23,26,5,10,0,0,24,25,5,5,0,0,25,27,5,10,0,0,26,24,1,0,0,0,26,
		27,1,0,0,0,27,28,1,0,0,0,28,30,5,6,0,0,29,31,3,8,4,0,30,29,1,0,0,0,31,
		32,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,5,1,0,0,0,34,35,5,3,0,0,35,36,
		5,4,0,0,36,37,5,10,0,0,37,38,5,9,0,0,38,39,5,10,0,0,39,7,1,0,0,0,40,41,
		5,7,0,0,41,42,5,10,0,0,42,9,1,0,0,0,4,13,17,26,32
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
